Index: 07_AdvancedOOPFeatures/homework_7.2/Employees/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 07_AdvancedOOPFeatures/homework_7.2/Employees/.gitignore	(date 1608557964000)
+++ 07_AdvancedOOPFeatures/homework_7.2/Employees/.gitignore	(date 1608557964000)
@@ -0,0 +1,200 @@
+
+# Created by https://www.gitignore.io/api/java,linux,macos,maven,windows,jetbrains
+# Edit at https://www.gitignore.io/?templates=java,linux,macos,maven,windows,jetbrains
+
+### Java ###
+# Compiled class file
+*.class
+
+# Log file
+*.log
+
+# BlueJ files
+*.ctxt
+
+# Mobile Tools for Java (J2ME)
+.mtj.tmp/
+
+# Package Files #
+*.jar
+*.war
+*.nar
+*.ear
+*.zip
+*.tar.gz
+*.rar
+
+# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
+hs_err_pid*
+
+### JetBrains ###
+# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio and WebStorm
+# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839
+
+# User-specific stuff
+.idea/**/workspace.xml
+.idea/**/tasks.xml
+.idea/**/usage.statistics.xml
+.idea/**/dictionaries
+.idea/**/shelf
+
+# Generated files
+.idea/**/contentModel.xml
+
+# Sensitive or high-churn files
+.idea/**/dataSources/
+.idea/**/dataSources.ids
+.idea/**/dataSources.local.xml
+.idea/**/sqlDataSources.xml
+.idea/**/dynamic.xml
+.idea/**/uiDesigner.xml
+.idea/**/dbnavigator.xml
+
+# Gradle
+.idea/**/gradle.xml
+.idea/**/libraries
+
+# Gradle and Maven with auto-import
+# When using Gradle or Maven with auto-import, you should exclude module files,
+# since they will be recreated, and may cause churn.  Uncomment if using
+# auto-import.
+# .idea/modules.xml
+# .idea/*.iml
+# .idea/modules
+# *.iml
+# *.ipr
+
+# CMake
+cmake-build-*/
+
+# Mongo Explorer plugin
+.idea/**/mongoSettings.xml
+
+# File-based project format
+*.iws
+
+# IntelliJ
+out/
+
+# mpeltonen/sbt-idea plugin
+.idea_modules/
+
+# JIRA plugin
+atlassian-ide-plugin.xml
+
+# Cursive Clojure plugin
+.idea/replstate.xml
+
+# Crashlytics plugin (for Android Studio and IntelliJ)
+com_crashlytics_export_strings.xml
+crashlytics.properties
+crashlytics-build.properties
+fabric.properties
+
+# Editor-based Rest Client
+.idea/httpRequests
+
+# Android studio 3.1+ serialized cache file
+.idea/caches/build_file_checksums.ser
+
+### JetBrains Patch ###
+# Comment Reason: https://github.com/joeblau/gitignore.io/issues/186#issuecomment-215987721
+
+# *.iml
+# modules.xml
+# .idea/misc.xml
+# *.ipr
+
+# Sonarlint plugin
+.idea/**/sonarlint/
+
+# SonarQube Plugin
+.idea/**/sonarIssues.xml
+
+# Markdown Navigator plugin
+.idea/**/markdown-navigator.xml
+.idea/**/markdown-navigator/
+
+### Linux ###
+*~
+
+# temporary files which can be created if a process still has a handle open of a deleted file
+.fuse_hidden*
+
+# KDE directory preferences
+.directory
+
+# Linux trash folder which might appear on any partition or disk
+.Trash-*
+
+# .nfs files are created when an open file is removed but is still being accessed
+.nfs*
+
+### macOS ###
+# General
+.DS_Store
+.AppleDouble
+.LSOverride
+
+# Icon must end with two \r
+Icon
+
+# Thumbnails
+._*
+
+# Files that might appear in the root of a volume
+.DocumentRevisions-V100
+.fseventsd
+.Spotlight-V100
+.TemporaryItems
+.Trashes
+.VolumeIcon.icns
+.com.apple.timemachine.donotpresent
+
+# Directories potentially created on remote AFP share
+.AppleDB
+.AppleDesktop
+Network Trash Folder
+Temporary Items
+.apdisk
+
+### Maven ###
+target/
+pom.xml.tag
+pom.xml.releaseBackup
+pom.xml.versionsBackup
+pom.xml.next
+release.properties
+dependency-reduced-pom.xml
+buildNumber.properties
+.mvn/timing.properties
+.mvn/wrapper/maven-wrapper.jar
+.flattened-pom.xml
+
+### Windows ###
+# Windows thumbnail cache files
+Thumbs.db
+Thumbs.db:encryptable
+ehthumbs.db
+ehthumbs_vista.db
+
+# Dump file
+*.stackdump
+
+# Folder config file
+[Dd]esktop.ini
+
+# Recycle Bin used on file shares
+$RECYCLE.BIN/
+
+# Windows Installer files
+*.cab
+*.msi
+*.msix
+*.msm
+*.msp
+
+# Windows shortcuts
+*.lnk
+
+# End of https://www.gitignore.io/api/java,linux,macos,maven,windows,jetbrains
Index: 07_AdvancedOOPFeatures/homework_7.2/Airport/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 07_AdvancedOOPFeatures/homework_7.2/Airport/.gitignore	(date 1608557964000)
+++ 07_AdvancedOOPFeatures/homework_7.2/Airport/.gitignore	(date 1608557964000)
@@ -0,0 +1,200 @@
+
+# Created by https://www.gitignore.io/api/java,linux,macos,maven,windows,jetbrains
+# Edit at https://www.gitignore.io/?templates=java,linux,macos,maven,windows,jetbrains
+
+### Java ###
+# Compiled class file
+*.class
+
+# Log file
+*.log
+
+# BlueJ files
+*.ctxt
+
+# Mobile Tools for Java (J2ME)
+.mtj.tmp/
+
+# Package Files #
+*.jar
+*.war
+*.nar
+*.ear
+*.zip
+*.tar.gz
+*.rar
+
+# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
+hs_err_pid*
+
+### JetBrains ###
+# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio and WebStorm
+# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839
+
+# User-specific stuff
+.idea/**/workspace.xml
+.idea/**/tasks.xml
+.idea/**/usage.statistics.xml
+.idea/**/dictionaries
+.idea/**/shelf
+
+# Generated files
+.idea/**/contentModel.xml
+
+# Sensitive or high-churn files
+.idea/**/dataSources/
+.idea/**/dataSources.ids
+.idea/**/dataSources.local.xml
+.idea/**/sqlDataSources.xml
+.idea/**/dynamic.xml
+.idea/**/uiDesigner.xml
+.idea/**/dbnavigator.xml
+
+# Gradle
+.idea/**/gradle.xml
+.idea/**/libraries
+
+# Gradle and Maven with auto-import
+# When using Gradle or Maven with auto-import, you should exclude module files,
+# since they will be recreated, and may cause churn.  Uncomment if using
+# auto-import.
+# .idea/modules.xml
+# .idea/*.iml
+# .idea/modules
+# *.iml
+# *.ipr
+
+# CMake
+cmake-build-*/
+
+# Mongo Explorer plugin
+.idea/**/mongoSettings.xml
+
+# File-based project format
+*.iws
+
+# IntelliJ
+out/
+
+# mpeltonen/sbt-idea plugin
+.idea_modules/
+
+# JIRA plugin
+atlassian-ide-plugin.xml
+
+# Cursive Clojure plugin
+.idea/replstate.xml
+
+# Crashlytics plugin (for Android Studio and IntelliJ)
+com_crashlytics_export_strings.xml
+crashlytics.properties
+crashlytics-build.properties
+fabric.properties
+
+# Editor-based Rest Client
+.idea/httpRequests
+
+# Android studio 3.1+ serialized cache file
+.idea/caches/build_file_checksums.ser
+
+### JetBrains Patch ###
+# Comment Reason: https://github.com/joeblau/gitignore.io/issues/186#issuecomment-215987721
+
+# *.iml
+# modules.xml
+# .idea/misc.xml
+# *.ipr
+
+# Sonarlint plugin
+.idea/**/sonarlint/
+
+# SonarQube Plugin
+.idea/**/sonarIssues.xml
+
+# Markdown Navigator plugin
+.idea/**/markdown-navigator.xml
+.idea/**/markdown-navigator/
+
+### Linux ###
+*~
+
+# temporary files which can be created if a process still has a handle open of a deleted file
+.fuse_hidden*
+
+# KDE directory preferences
+.directory
+
+# Linux trash folder which might appear on any partition or disk
+.Trash-*
+
+# .nfs files are created when an open file is removed but is still being accessed
+.nfs*
+
+### macOS ###
+# General
+.DS_Store
+.AppleDouble
+.LSOverride
+
+# Icon must end with two \r
+Icon
+
+# Thumbnails
+._*
+
+# Files that might appear in the root of a volume
+.DocumentRevisions-V100
+.fseventsd
+.Spotlight-V100
+.TemporaryItems
+.Trashes
+.VolumeIcon.icns
+.com.apple.timemachine.donotpresent
+
+# Directories potentially created on remote AFP share
+.AppleDB
+.AppleDesktop
+Network Trash Folder
+Temporary Items
+.apdisk
+
+### Maven ###
+target/
+pom.xml.tag
+pom.xml.releaseBackup
+pom.xml.versionsBackup
+pom.xml.next
+release.properties
+dependency-reduced-pom.xml
+buildNumber.properties
+.mvn/timing.properties
+.mvn/wrapper/maven-wrapper.jar
+.flattened-pom.xml
+
+### Windows ###
+# Windows thumbnail cache files
+Thumbs.db
+Thumbs.db:encryptable
+ehthumbs.db
+ehthumbs_vista.db
+
+# Dump file
+*.stackdump
+
+# Folder config file
+[Dd]esktop.ini
+
+# Recycle Bin used on file shares
+$RECYCLE.BIN/
+
+# Windows Installer files
+*.cab
+*.msi
+*.msix
+*.msm
+*.msp
+
+# Windows shortcuts
+*.lnk
+
+# End of https://www.gitignore.io/api/java,linux,macos,maven,windows,jetbrains
Index: 07_AdvancedOOPFeatures/homework_7.2/Employees/data/staff.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 07_AdvancedOOPFeatures/homework_7.2/Employees/data/staff.txt	(date 1608557964000)
+++ 07_AdvancedOOPFeatures/homework_7.2/Employees/data/staff.txt	(date 1608557964000)
@@ -0,0 +1,16 @@
+Дмитриев Василий	78000	12.07.2016
+Алексей Ивлиев	125000	11.11.2018
+Анна Сетяева	140000	10.05.2012
+Дмитрий Кочергин	140000	31.01.2017
+Михаил Быковский	78000	10.02.2018
+Артём Фигурнов	78000	22.04.2018
+Марина Евстафьева	95000	17.03.2017
+Павел Смородинов	88000	19.09.2018
+Жанна Ковалёва	78000	20.02.2018
+Степан Богданов	140000	17.04.2016
+Виктор Рязанов	95000	20.03.2017
+Савелий Фёдоров	115000	07.05.2019
+Андрей Леонов	88000	16.12.2017
+Татьяна Рыхальская	95000	10.10.2018
+Анастасия Бернадо	78000	05.06.2015
+Евгений Алфёров	105000	12.08.2016
\ No newline at end of file
Index: 07_AdvancedOOPFeatures/homework_7.2/Employees/src/main/java/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 07_AdvancedOOPFeatures/homework_7.2/Employees/src/main/java/Main.java	(date 1608557964000)
+++ 07_AdvancedOOPFeatures/homework_7.2/Employees/src/main/java/Main.java	(date 1608557964000)
@@ -0,0 +1,18 @@
+import java.util.List;
+
+public class Main {
+
+    private static final String STAFF_TXT = "data/staff.txt";
+
+    public static void main(String[] args) {
+        List<Employee> staff = Employee.loadStaffFromFile(STAFF_TXT);
+        Employee employeeMaxSalary = findEmployeeWithHighestSalary(staff, 2017);
+        System.out.println(employeeMaxSalary);
+    }
+
+    public static Employee findEmployeeWithHighestSalary(List<Employee> staff, int year) {
+        //TODO Метод должен вернуть сотрудника с максимальной зарплатой среди тех,
+        // кто пришёл в году, указанном в переменной year
+        return null;
+    }
+}
\ No newline at end of file
Index: 07_AdvancedOOPFeatures/homework_7.2/Employees/src/main/java/Employee.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 07_AdvancedOOPFeatures/homework_7.2/Employees/src/main/java/Employee.java	(date 1608557964000)
+++ 07_AdvancedOOPFeatures/homework_7.2/Employees/src/main/java/Employee.java	(date 1608557964000)
@@ -0,0 +1,92 @@
+import java.nio.file.Files;
+import java.nio.file.Paths;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+import java.util.Objects;
+
+public class Employee {
+
+  private String name;
+  private Integer salary;
+  private Date workStart;
+
+  public Employee(String name, Integer salary, Date workStart) {
+    this.name = name;
+    this.salary = salary;
+    this.workStart = workStart;
+  }
+
+  public static List<Employee> loadStaffFromFile(String path) {
+    List<Employee> staff = new ArrayList<>();
+    try {
+      List<String> lines = Files.readAllLines(Paths.get(path));
+      for (String line : lines) {
+        String[] fragments = line.split("\t");
+        if (fragments.length != 3) {
+          System.out.println("Wrong line: " + line);
+          continue;
+        }
+        String dateFormat = "dd.MM.yyyy";
+        staff.add(new Employee(
+            fragments[0],
+            Integer.parseInt(fragments[1]),
+            (new SimpleDateFormat(dateFormat)).parse(fragments[2])
+        ));
+      }
+    } catch (Exception ex) {
+      ex.printStackTrace();
+    }
+    return staff;
+  }
+
+  public String getName() {
+    return name;
+  }
+
+  public void setName(String name) {
+    this.name = name;
+  }
+
+  public Integer getSalary() {
+    return salary;
+  }
+
+  public void setSalary(int salary) {
+    this.salary = salary;
+  }
+
+  public Date getWorkStart() {
+    return workStart;
+  }
+
+  public void setWorkStart(Date workStart) {
+    this.workStart = workStart;
+  }
+
+  public String toString() {
+    return name + " - " + salary + " - " +
+        (new SimpleDateFormat("dd.MM.yyyy")).format(workStart);
+  }
+
+  @Override
+  public boolean equals(Object o) {
+    if (this == o) {
+      return true;
+    }
+    if (o == null || getClass() != o.getClass()) {
+      return false;
+    }
+    Employee employee = (Employee) o;
+    return Objects.equals(name, employee.name) &&
+        Objects.equals(salary, employee.salary) &&
+        Objects.equals(workStart, employee.workStart);
+  }
+
+  @Override
+  public int hashCode() {
+    return Objects.hash(name, salary, workStart);
+  }
+
+}
Index: 07_AdvancedOOPFeatures/homework_7.2/Employees/src/test/java/TestFindEmployeeByHighestSalary.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 07_AdvancedOOPFeatures/homework_7.2/Employees/src/test/java/TestFindEmployeeByHighestSalary.java	(date 1608557964000)
+++ 07_AdvancedOOPFeatures/homework_7.2/Employees/src/test/java/TestFindEmployeeByHighestSalary.java	(date 1608557964000)
@@ -0,0 +1,24 @@
+import org.junit.jupiter.api.DisplayName;
+import org.junit.jupiter.api.Test;
+
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.List;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+@DisplayName("Поиск сотрудника с максимальной зарплатой среди тех, кто пришёл в 2017 году ")
+public class TestFindEmployeeByHighestSalary {
+
+  @Test
+  @DisplayName("Входные данные - staff.txt ")
+  void getEmployee() throws ParseException {
+    List<Employee> staff = Employee.loadStaffFromFile("data/staff.txt");
+    Date date = (new SimpleDateFormat("dd.MM.yyyy")).parse("31.01.2017");
+    Employee expectedEmployee = new Employee("Дмитрий Кочергин", 140000, date);
+    Employee actualEmployee = Main.findEmployeeWithHighestSalary(staff, 2017);
+    assertEquals(expectedEmployee, actualEmployee);
+  }
+
+}
Index: 07_AdvancedOOPFeatures/homework_7.2/Airport/src/test/java/TestFindPlanesLeavingInTheNextTwoHours.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 07_AdvancedOOPFeatures/homework_7.2/Airport/src/test/java/TestFindPlanesLeavingInTheNextTwoHours.java	(date 1611166797495)
+++ 07_AdvancedOOPFeatures/homework_7.2/Airport/src/test/java/TestFindPlanesLeavingInTheNextTwoHours.java	(date 1611166797495)
@@ -0,0 +1,91 @@
+import com.skillbox.airport.Aircraft;
+import com.skillbox.airport.Airport;
+import com.skillbox.airport.Flight;
+import com.skillbox.airport.Flight.Type;
+import com.skillbox.airport.Terminal;
+import org.junit.jupiter.api.DisplayName;
+import org.junit.jupiter.api.Test;
+
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+import java.util.UUID;
+import java.util.stream.IntStream;
+
+import static org.junit.jupiter.api.Assertions.assertIterableEquals;
+
+@DisplayName("Поиск рейсов")
+public class TestFindPlanesLeavingInTheNextTwoHours {
+
+    private static final List<Flight> expectedFlights = new ArrayList<>();
+    private static final int HOUR = 3600000;
+    private static final int THREE_HOURS = 10800000;
+    private static final int HOUR_AND_HALF = 5400000;
+    private static final String[] companyCodes = new String[]{"SU", "AA", "AR", "AF", "B2", "FV"};
+
+    private static String stringify(List<Flight> flights) {
+        return "[" + String.join(", ",
+                flights.stream()
+                        .map(Flight::toString)
+                        .toArray(String[]::new)) + "]";
+    }
+
+    private static List<Terminal> generateRandomTerminals() {
+        List<Terminal> terminals = new ArrayList<>();
+        IntStream.range(0, 5).mapToObj(i -> new Terminal(UUID.randomUUID().toString()))
+                .forEach(terminal -> {
+                    Flight expectedFlight1 = generateDepartureFlight(generateDate(HOUR));
+                    Flight expectedFlight2 = generateDepartureFlight(generateDate(HOUR_AND_HALF));
+                    terminal.addFlight(expectedFlight1);
+                    terminal.addFlight(expectedFlight2);
+                    terminal.addFlight(generateDepartureFlight(generateDate(THREE_HOURS)));
+                    terminal.addFlight(generateDepartureFlight(generateDate(THREE_HOURS)));
+                    terminal.addFlight(generateArrivalFlight(generateDate(HOUR)));
+                    terminal.addFlight(generateArrivalFlight(generateDate(HOUR_AND_HALF)));
+                    terminal.addFlight(generateArrivalFlight(generateDate(THREE_HOURS)));
+
+                    expectedFlights.add(expectedFlight1);
+                    expectedFlights.add(expectedFlight2);
+                    terminals.add(terminal);
+                });
+        return terminals;
+    }
+
+    private static Date generateDate(int hours) {
+        return new Date(System.currentTimeMillis() + hours);
+    }
+
+    private static Aircraft generateAircraft() {
+        return new Aircraft(getRandomString());
+    }
+
+    private static Flight generateArrivalFlight(Date date) {
+        return new Flight(getRandomString(), Type.ARRIVAL, date, generateAircraft());
+    }
+
+    private static Flight generateDepartureFlight(Date date) {
+        return new Flight(getRandomString(), Type.DEPARTURE, date, generateAircraft());
+    }
+
+    private static String getRandomString() {
+        return companyCodes[(int) (Math.random() * companyCodes.length)] + "-" + (int) (Math.random() * 1000 + 1000);
+    }
+
+    @Test
+    @DisplayName("Поиск рейсов вылетающих в ближайшие два часа")
+    void searchFlight() {
+        Airport airport = Airport.getInstance();
+        List<Terminal> terminals = generateRandomTerminals();
+        airport.getTerminals().clear();
+        airport.getTerminals().addAll(terminals);
+
+        List<Flight> actualFlight = Main.findPlanesLeavingInTheNextTwoHours(airport);
+        assertIterableEquals(expectedFlights, actualFlight,
+                String.join(", ", String.format("%nActual:%s%nExpected:%s",
+                        stringify(expectedFlights),
+                        stringify(actualFlight))
+                ));
+
+    }
+
+}
Index: 07_AdvancedOOPFeatures/homework_7.2/Airport/src/main/java/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 07_AdvancedOOPFeatures/homework_7.2/Airport/src/main/java/Main.java	(date 1611592772147)
+++ 07_AdvancedOOPFeatures/homework_7.2/Airport/src/main/java/Main.java	(date 1611592772147)
@@ -0,0 +1,40 @@
+import com.skillbox.airport.Airport;
+import com.skillbox.airport.Flight;
+import com.skillbox.airport.Terminal;
+
+import java.time.*;
+import java.time.format.DateTimeFormatter;
+import java.util.Collections;
+import java.util.Date;
+import java.util.List;
+import java.util.stream.Collectors;
+
+public class Main {
+    public static void main(String[] args) {
+
+
+    }
+
+    public static LocalTime convertDate(Date inputDate) {
+
+        LocalTime time = LocalDateTime.ofInstant(inputDate.toInstant(),
+                ZoneId.systemDefault()).toLocalTime();
+
+        return time;
+    }
+
+    public static List<Flight> findPlanesLeavingInTheNextTwoHours(Airport airport) {
+        //TODO Метод должден вернуть список рейсов вылетающих в ближайшие два часа.
+//        airport.getAllAircraft().forEach(System.out::println);
+
+//        airport.getTerminals().forEach(e -> System.out.println(e.getFlights()));
+        List<Flight> flights =  airport.getTerminals().forEach(e -> {
+            e.getFlights().stream()
+                    .filter(y -> convertDate(y.getDate()).isBefore(LocalTime.now().plusHours(2)))
+                    .toArray();
+            });
+
+        return newAir;
+    }
+
+}
\ No newline at end of file

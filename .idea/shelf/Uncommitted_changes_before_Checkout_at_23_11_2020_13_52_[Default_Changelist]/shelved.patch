Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>.idea/\r\nout/\r\nlib/\r\n*.iml\r\n*.iws\r\n*.ipr
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .gitignore	(revision 46942a9f1155c63b8356e9393047c2be2aea01dc)
+++ .gitignore	(date 1606114227677)
@@ -1,6 +1,145 @@
-.idea/
+.DS_Store
+# Created by https://www.gitignore.io/api/java,windows,jetbrains
+# Edit at https://www.gitignore.io/?templates=java,windows,jetbrains
+
+### Java ###
+# Compiled class file
+*.class
+*.xml
+# Log file
+*.log
+
+# BlueJ files
+*.ctxt
+
+# Mobile Tools for Java (J2ME)
+.mtj.tmp/
+
+# Package Files #
+*.jar
+*.war
+*.nar
+*.ear
+*.zip
+*.tar.gz
+*.rar
+
+# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
+hs_err_pid*
+
+### JetBrains ###
+# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio and WebStorm
+# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839
+
+# User-specific stuff
+.idea/**/workspace.xml
+.idea/**/tasks.xml
+.idea/**/usage.statistics.xml
+.idea/**/dictionaries
+.idea/**/shelf
+
+# Generated files
+.idea/**/contentModel.xml
+
+# Sensitive or high-churn files
+.idea/**/dataSources/
+.idea/**/dataSources.ids
+.idea/**/dataSources.local.xml
+.idea/**/sqlDataSources.xml
+.idea/**/dynamic.xml
+.idea/**/uiDesigner.xml
+.idea/**/dbnavigator.xml
+
+# Gradle
+.idea/**/gradle.xml
+.idea/**/libraries
+
+# Gradle and Maven with auto-import
+# When using Gradle or Maven with auto-import, you should exclude module files,
+# since they will be recreated, and may cause churn.  Uncomment if using
+# auto-import.
+# .idea/modules.xml
+# .idea/modules
+# *.ipr
+
+# CMake
+cmake-build-*/
+
+# Mongo Explorer plugin
+.idea/**/mongoSettings.xml
+
+# File-based project format
+*.iws
+
+# IntelliJ
+.idea/*
 out/
-lib/
+
+# mpeltonen/sbt-idea plugin
+.idea_modules/
+
+# JIRA plugin
+atlassian-ide-plugin.xml
+
+# Cursive Clojure plugin
+.idea/replstate.xml
+
+# Crashlytics plugin (for Android Studio and IntelliJ)
+com_crashlytics_export_strings.xml
+crashlytics.properties
+crashlytics-build.properties
+fabric.properties
+
+# Editor-based Rest Client
+.idea/httpRequests
+
+# Android studio 3.1+ serialized cache file
+.idea/caches/build_file_checksums.ser
+
+### JetBrains Patch ###
+# Comment Reason: https://github.com/joeblau/gitignore.io/issues/186#issuecomment-215987721
+
+# modules.xml
+# .idea/misc.xml
+# *.ipr
+
+# Sonarlint plugin
+.idea/**/sonarlint/
+
+# SonarQube Plugin
+.idea/**/sonarIssues.xml
+
+# Markdown Navigator plugin
+.idea/**/markdown-navigator.xml
+.idea/**/markdown-navigator/
+
+### Windows ###
+# Windows thumbnail cache files
+Thumbs.db
+Thumbs.db:encryptable
+ehthumbs.db
+ehthumbs_vista.db
+
+# Dump file
+*.stackdump
+
+# Folder config file
+[Dd]esktop.ini
+
+# Recycle Bin used on file shares
+$RECYCLE.BIN/
+
+# Windows Installer files
+*.cab
+*.msi
+*.msix
+*.msm
+*.msp
+
+# Windows shortcuts
+*.lnk
+
+# End of https://www.gitignore.io/api/java,windows,jetbrains
 *.iml
-*.iws
-*.ipr
\ No newline at end of file
+*.xml
+.idea
\ No newline at end of file
Index: 03_ObjectsAndClasses/RoadController/RoadController.iml
===================================================================
--- 03_ObjectsAndClasses/RoadController/RoadController.iml	(revision 46942a9f1155c63b8356e9393047c2be2aea01dc)
+++ 03_ObjectsAndClasses/RoadController/RoadController.iml	(revision 46942a9f1155c63b8356e9393047c2be2aea01dc)
@@ -1,11 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-</module>
\ No newline at end of file
Index: 03_ObjectsAndClasses/Cat/Cat.iml
===================================================================
--- 03_ObjectsAndClasses/Cat/Cat.iml	(revision 46942a9f1155c63b8356e9393047c2be2aea01dc)
+++ 03_ObjectsAndClasses/Cat/Cat.iml	(revision 46942a9f1155c63b8356e9393047c2be2aea01dc)
@@ -1,11 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-</module>
\ No newline at end of file
Index: 03_ObjectsAndClasses/Cat/src/CatLoader.java
===================================================================
--- 03_ObjectsAndClasses/Cat/src/CatLoader.java	(revision 46942a9f1155c63b8356e9393047c2be2aea01dc)
+++ 03_ObjectsAndClasses/Cat/src/CatLoader.java	(revision 46942a9f1155c63b8356e9393047c2be2aea01dc)
@@ -1,9 +0,0 @@
-public class CatLoader
-{
-    public static void main(String[] args)
-    {
-        Cat cat = new Cat();
-
-        System.out.println(cat.getStatus());
-    }
-}
\ No newline at end of file
Index: 03_ObjectsAndClasses/RoadController/src/core/Car.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package core;\r\n\r\npublic class Car\r\n{\r\n    public String number;\r\n    public int height;\r\n    public double weight;\r\n    public boolean hasVehicle;\r\n    public boolean isSpecial;\r\n\r\n    public String toString()\r\n    {\r\n        String special = isSpecial ? \"СПЕЦТРАНСПОРТ \" : \"\";\r\n        return \"\\n=========================================\\n\" +\r\n            special + \"Автомобиль с номером \" + number +\r\n            \":\\n\\tВысота: \" + height + \" мм\\n\\tМасса: \" + weight + \" кг\";\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 03_ObjectsAndClasses/RoadController/src/core/Car.java	(revision 46942a9f1155c63b8356e9393047c2be2aea01dc)
+++ 03_ObjectsAndClasses/RoadController/src/core/Car.java	(date 1606113815474)
@@ -8,6 +8,46 @@
     public boolean hasVehicle;
     public boolean isSpecial;
 
+    public String getNumber() {
+        return number;
+    }
+
+    public void setNumber(String number) {
+        this.number = number;
+    }
+
+    public int getHeight() {
+        return height;
+    }
+
+    public void setHeight(int height) {
+        this.height = height;
+    }
+
+    public double getWeight() {
+        return weight;
+    }
+
+    public void setWeight(double weight) {
+        this.weight = weight;
+    }
+
+    public boolean isHasVehicle() {
+        return hasVehicle;
+    }
+
+    public void setHasVehicle(boolean hasVehicle) {
+        this.hasVehicle = hasVehicle;
+    }
+
+    public boolean isSpecial() {
+        return isSpecial;
+    }
+
+    public void setSpecial(boolean special) {
+        isSpecial = special;
+    }
+
     public String toString()
     {
         String special = isSpecial ? "СПЕЦТРАНСПОРТ " : "";
Index: 03_ObjectsAndClasses/RoadController/src/RoadController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import core.*;\r\nimport core.Camera;\r\n\r\nimport java.util.Scanner;\r\n\r\npublic class RoadController\r\n{\r\n    private static double passengerCarMaxWeight = 3500.0; // kg\r\n    private static int passengerCarMaxHeight = 2000; // mm\r\n    private static int controllerMaxHeight = 4000; // mm\r\n\r\n    private static int passengerCarPrice = 100; // RUB\r\n    private static int cargoCarPrice = 250; // RUB\r\n    private static int vehicleAdditionalPrice = 200; // RUB\r\n\r\n    public static void main(String[] args)\r\n    {\r\n        System.out.println(\"Сколько автомобилей сгенерировать?\");\r\n\r\n        Scanner scanner = new Scanner(System.in);\r\n        int carsCount = scanner.nextInt();\r\n\r\n        for(int i = 0; i < carsCount; i++)\r\n        {\r\n            Car car = Camera.getNextCar();\r\n            System.out.println(car);\r\n\r\n            //Пропускаем автомобили спецтранспорта бесплатно\r\n            if (car.isSpecial) {\r\n                openWay();\r\n                continue;\r\n            }\r\n\r\n            //Проверяем высоту и массу автомобиля, вычисляем стоимость проезда\r\n            int price = calculatePrice(car);\r\n            if(price == -1) {\r\n                continue;\r\n            }\r\n\r\n            System.out.println(\"Общая сумма к оплате: \" + price + \" руб.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Расчёт стоимости проезда исходя из массы и высоты\r\n     */\r\n    private static int calculatePrice(Car car)\r\n    {\r\n        int carHeight = car.height;\r\n        int price = 0;\r\n        if (carHeight > controllerMaxHeight)\r\n        {\r\n            blockWay(\"высота вашего ТС превышает высоту пропускного пункта!\");\r\n            return -1;\r\n        }\r\n        else if (carHeight > passengerCarMaxHeight)\r\n        {\r\n            double weight = car.weight;\r\n            //Грузовой автомобиль\r\n            if (weight > passengerCarMaxWeight)\r\n            {\r\n                price = passengerCarPrice;\r\n                if (car.hasVehicle) {\r\n                    price = price + vehicleAdditionalPrice;\r\n                }\r\n            }\r\n            //Легковой автомобиль\r\n            else {\r\n                price = cargoCarPrice;\r\n            }\r\n        }\r\n        else {\r\n            price = passengerCarPrice;\r\n        }\r\n        return price;\r\n    }\r\n\r\n    /**\r\n     * Открытие шлагбаума\r\n     */\r\n    private static void openWay()\r\n    {\r\n        System.out.println(\"Шлагбаум открывается... Счастливого пути!\");\r\n    }\r\n\r\n    /**\r\n     * Сообщение о невозможности проезда\r\n     */\r\n    private static void blockWay(String reason)\r\n    {\r\n        System.out.println(\"Проезд невозможен: \" + reason);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 03_ObjectsAndClasses/RoadController/src/RoadController.java	(revision 46942a9f1155c63b8356e9393047c2be2aea01dc)
+++ 03_ObjectsAndClasses/RoadController/src/RoadController.java	(date 1606113815480)
@@ -1,5 +1,4 @@
 import core.*;
-import core.Camera;
 
 import java.util.Scanner;
 
@@ -47,7 +46,7 @@
     private static int calculatePrice(Car car)
     {
         int carHeight = car.height;
-        int price = 0;
+        int price;
         if (carHeight > controllerMaxHeight)
         {
             blockWay("высота вашего ТС превышает высоту пропускного пункта!");
Index: 03_ObjectsAndClasses/Cat/src/Cat.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\npublic class Cat\r\n{\r\n    private double originWeight;\r\n    private double weight;\r\n\r\n    private double minWeight;\r\n    private double maxWeight;\r\n\r\n    public Cat()\r\n    {\r\n        weight = 1500.0 + 3000.0 * Math.random();\r\n        originWeight = weight;\r\n        minWeight = 1000.0;\r\n        maxWeight = 9000.0;\r\n\r\n    }\r\n\r\n    public void meow()\r\n    {\r\n        weight = weight - 1;\r\n        System.out.println(\"Meow\");\r\n    }\r\n\r\n    public void feed(Double amount)\r\n    {\r\n        weight = weight + amount;\r\n    }\r\n\r\n    public void drink(Double amount)\r\n    {\r\n        weight = weight + amount;\r\n    }\r\n\r\n    public Double getWeight()\r\n    {\r\n        return weight;\r\n    }\r\n\r\n    public String getStatus()\r\n    {\r\n        if(weight < minWeight) {\r\n            return \"Dead\";\r\n        }\r\n        else if(weight > maxWeight) {\r\n            return \"Exploded\";\r\n        }\r\n        else if(weight > originWeight) {\r\n            return \"Sleeping\";\r\n        }\r\n        else {\r\n            return \"Playing\";\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 03_ObjectsAndClasses/Cat/src/Cat.java	(revision 46942a9f1155c63b8356e9393047c2be2aea01dc)
+++ 03_ObjectsAndClasses/Cat/src/Cat.java	(date 1606113815496)
@@ -1,55 +1,159 @@
 
-public class Cat
-{
+public class Cat {
     private double originWeight;
     private double weight;
 
     private double minWeight;
     private double maxWeight;
+    private double foodAmount;
+    public static int count;
+    public static final int COUNT_EYES = 2;
+    public static final double MIN_WEIGHT = 2000.0;
+    public static final double MAX_WEIGHT = 8000.0;
+    private CatColour colour; //ЕНАМ переменная
+    private int toysItHas;
+    private String status;
 
-    public Cat()
-    {
+    public Cat() {
         weight = 1500.0 + 3000.0 * Math.random();
         originWeight = weight;
         minWeight = 1000.0;
         maxWeight = 9000.0;
+        foodAmount = 0;
+        count++;
+        toysItHas = 0;
+    }
 
+    //Конструктор с вводом данных
+    public Cat(double weight) {
+        this();
+        this.weight = weight;
+        originWeight = weight;
     }
 
-    public void meow()
-    {
-        weight = weight - 1;
-        System.out.println("Meow");
+    //Конструктор на основе ЕНАМ данных
+    public Cat(CatColour colour) {
+        this();
+        this.colour = colour;
+    }
+
+    //Копировальня
+    public Cat copy() {
+        Cat copyCat = new Cat();
+        copyCat.weight=this.weight;
+        copyCat.originWeight=this.originWeight;
+        copyCat.toysItHas=this.toysItHas;
+        copyCat.foodAmount=this.foodAmount;
+        return copyCat;
+    }
+
+    public void meow() {
+        if (isAlive()) {
+            weight = weight - 1000;
+            System.out.println("Meow");
+
+            if (!isAlive()) {
+                count--;
+            }
+
+        } else {
+            System.out.println("Кошка респавнится...");
+        }
     }
 
-    public void feed(Double amount)
-    {
-        weight = weight + amount;
+    public void feed(Double amount) {
+        if (isAlive()) {
+            weight = weight + amount;
+            foodAmount = amount;
+
+            if (!isAlive()) {
+                count--;
+            }
+        } else {
+            System.out.println("Кошка ушла внебытие. Нельзя кормить");
+        }
     }
 
-    public void drink(Double amount)
-    {
-        weight = weight + amount;
+    public void drink(Double amount) {
+        if (isAlive()) {
+            weight = weight + amount;
+            if (!isAlive()) {
+                count--;
+            }
+        } else {
+            System.out.println("Кошка ушла внебытие. Нельзя поить");
+        }
     }
 
-    public Double getWeight()
-    {
+    public Double getWeight() {
         return weight;
     }
 
-    public String getStatus()
-    {
-        if(weight < minWeight) {
+    public double getMaxWeight() { //Возвращаем макс. значение массы, чтобы в цикле сравнить
+
+        return maxWeight;
+    }
+
+    public double getMinWeight() { //Возвращаем макс. значение массы, чтобы в цикле сравнить
+
+        return minWeight;
+    }
+
+    public double getFoodAmount() {
+        return foodAmount;
+    }
+
+    public void pee() {
+
+        if (isAlive()) {
+            weight--;
+            System.out.println("http://joxi.ru/l2ZpD56cEnXeXr");
+        } else {
+            System.out.println("Кошка ушла внебытие. Лоток больше убирать не надо");
+        }
+
+    }
+
+    public boolean isAlive() {
+        if (weight > minWeight && weight < maxWeight) {
+            return true;
+        } else {
+            System.out.println("Кошка ушла внебытие");
+            return false;
+        }
+    }
+
+    public String getStatus() {
+        if (weight < minWeight) {
             return "Dead";
-        }
-        else if(weight > maxWeight) {
+        } else if (weight > maxWeight) {
             return "Exploded";
-        }
-        else if(weight > originWeight) {
+        } else if (weight > originWeight) {
             return "Sleeping";
-        }
-        else {
+        } else {
             return "Playing";
         }
     }
+
+    public void setColour(CatColour colour) { //Геттер и Сеттер ЕНАМ данных
+        this.colour = colour;
+    }
+
+    public CatColour getColour() {
+        return colour;
+    }
+
+    public void setWeight(double weight) {
+        this.weight = weight;
+    }
+
+    public int getToysItHas() {
+        return toysItHas;
+    }
+
+    public void setToysItHas(int toysItHas) {
+        this.toysItHas = toysItHas;
+    }
+
+
 }
\ No newline at end of file
Index: 03_ObjectsAndClasses/Cat/src/Loader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 03_ObjectsAndClasses/Cat/src/Loader.java	(date 1606113815486)
+++ 03_ObjectsAndClasses/Cat/src/Loader.java	(date 1606113815486)
@@ -0,0 +1,172 @@
+
+public class Loader {
+
+
+    public static void main(String[] args) {
+        System.out.println(); //Просто отступ
+        //Кошка
+
+        Cat cat1 = new Cat();
+        System.out.println("Cat1 weight: " + cat1.getWeight());
+        cat1.feed(3.0);
+        System.out.println("Cat1 weight after feed: " + cat1.getWeight());
+        cat1.setColour(CatColour.BLACK);
+        System.out.println(cat1.getColour());
+
+        System.out.println(); //Просто отступ
+
+        //Кошка
+        Cat cat2 = new Cat();
+        System.out.println("Cat2 weight: " + cat2.getWeight());
+        cat2.feed(3.0);
+        System.out.println("Cat2 weight after feed: " + cat2.getWeight());
+
+        System.out.println(); //Просто отступ
+
+
+        //Кошка //Перекармливаем кошку
+        Cat cat3 = new Cat();
+        System.out.println("Перекармливаем до взрыва: ");
+        while (cat3.getWeight() <= cat3.getMaxWeight()) {
+
+            cat3.feed(1000.0);
+            if (cat3.getWeight() >= cat3.getMaxWeight()) {
+                System.out.println("Cat3 is overfeed: " + cat3.getStatus());
+            }
+        }
+
+        //Кошка
+        Cat cat4 = new Cat();
+
+        System.out.println(); //Просто отступ
+        System.out.println("Замяукиваем досмерти: ");
+
+        while (cat4.getWeight() >= cat4.getMinWeight()) {
+            cat4.meow();
+            if (cat4.getWeight() <= cat4.getMinWeight()) {
+                System.out.println("Cat4 is overMeow'ed: " + cat4.getStatus());
+            }
+        }
+
+        //Кошка //Тут жрём и сикаем. Что еще можно от жизни просить?
+        Cat catC = new Cat();
+        System.out.println(); //Просто отступ
+
+        System.out.println(catC.getWeight());
+        catC.feed(141.0);
+        System.out.println(catC.getWeight());
+        System.out.println(catC.getFoodAmount());
+
+        catC.getWeight();
+
+        //Кошка
+        Cat catV = new Cat();
+        System.out.println(); //Просто отступ
+
+        System.out.println("Едим и сбрасываем вес:");
+
+        System.out.println(catV.getWeight());
+        catV.feed(150.0);
+        System.out.println(catV.getWeight());
+        catV.pee();
+        catV.pee();
+        catV.pee();
+        System.out.println(catV.getWeight());
+        System.out.println("Сожрано Вискаса: " + catV.getFoodAmount());
+        catV.setToysItHas(54);
+
+        catV.getWeight();
+
+//        Кошка. Тут кормим мертвую кошку
+        Cat cat7 = new Cat();
+        System.out.println(); //Просто отступ
+
+        cat7.getWeight();
+        cat7.feed(10000.0);
+        cat7.getStatus();
+        cat7.feed(1.0);
+
+
+        System.out.println(); //Просто отступ
+        System.out.println(Cat.count); //Количество кошек. Учитывает взрыв и смерть
+
+//            Тут поим мертвую кошку
+        Cat cat8 = new Cat();
+        System.out.println(); //Просто отступ
+
+        cat8.drink(10000.0);
+        System.out.println(cat8.getWeight());
+        cat8.getStatus();
+        cat8.drink(1.0);
+        System.out.println(cat8.getWeight());
+        cat8.setToysItHas(4);
+        System.out.println(cat8.getToysItHas());
+
+        //Писаемся до смерти
+        Cat cat9 = new Cat();
+        System.out.println(); //Просто отступ
+
+        cat9.drink(10000.0);
+        cat9.getStatus();
+        cat9.pee();
+
+        System.out.println(cat9.getStatus());
+
+        //Показываем количество живых кошек
+        System.out.println("Количество выживших: " + Cat.count);
+
+        //Новый конструктор
+        Cat catWeight = new Cat(4500.0);
+        System.out.println(catWeight.getWeight());
+
+        //Котёнок, где создаём объект через метод
+        Cat getkitten = getkitten();
+
+        System.out.println("Вес котёнка: " + getkitten.getWeight());
+
+        //ЕНАМовский котёнок
+        Cat ps1 = new Cat(CatColour.RED);
+        System.out.println(ps1.getColour());
+
+
+        Cat getkittenWithColour = getkittenWithColour();
+        System.out.println("Котенок с краской из ENUM: " + getkittenWithColour.getColour());
+        System.out.println(); //Просто отступ
+
+
+        //Клонируем кота
+
+
+//
+//        Cat cat500 = new Cat();
+//        System.out.println("Cat 500 ves:" + cat500.getWeight());
+//        cat500.copy(cat8);
+//        System.out.println("Cat 500 ves:" + cat500.getWeight());
+
+        Cat copyCat = catV.copy(); //Вызываем метод копирования и передаем старую кошку, в котором копирует вес и игрушки
+        System.out.println("catV toys and weight before copy: " + catV.getToysItHas() + " " + catV.getWeight());
+        System.out.println("copyCat toys and weight before copy: " + copyCat.getToysItHas() + " " + copyCat.getWeight());
+        copyCat.feed(530.0);
+        copyCat.setToysItHas(12);
+        System.out.println("catV toys and weight after copy: " + catV.getToysItHas() + " " + catV.getWeight());
+        System.out.println("copyCat toys and weight after copy: " + copyCat.getToysItHas() + " " + copyCat.getWeight());
+
+
+        copyCat.feed(324.0); //Кормим скопированную кошку
+
+        System.out.println("catV weight after feed: " + catV.getWeight() + "\n" + " copyCat weight after feed: " + copyCat.getWeight()); //Проверяем, что мы покорпили скопированную кошку и вес изменился только у неё, а не у оригинала
+    }
+
+    private static Cat getkitten() { //А тут вопросы: В методt можно обращаться к другим классам (Cat)? где-то чего то я не понимаию. Можно Конкретики?
+        Cat kitty = new Cat(1100.0);
+        return kitty;
+    }
+
+    private static Cat getkittenWithColour() { //Метод на конструктор создания кота с цветом
+        Cat kotenok = new Cat(CatColour.ORANGE);
+        return kotenok;
+    }
+
+
+
+}
Index: 04_NumbersStringsAndDates/StringExperiments/.idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"CompilerConfiguration\">\r\n    <resourceExtensions />\r\n    <wildcardResourcePatterns>\r\n      <entry name=\"!?*.java\" />\r\n      <entry name=\"!?*.form\" />\r\n      <entry name=\"!?*.class\" />\r\n      <entry name=\"!?*.groovy\" />\r\n      <entry name=\"!?*.scala\" />\r\n      <entry name=\"!?*.flex\" />\r\n      <entry name=\"!?*.kt\" />\r\n      <entry name=\"!?*.clj\" />\r\n      <entry name=\"!?*.aj\" />\r\n    </wildcardResourcePatterns>\r\n    <annotationProcessing>\r\n      <profile default=\"true\" name=\"Default\" enabled=\"false\">\r\n        <processorPath useClasspath=\"true\" />\r\n      </profile>\r\n    </annotationProcessing>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_NumbersStringsAndDates/StringExperiments/.idea/compiler.xml	(revision 46942a9f1155c63b8356e9393047c2be2aea01dc)
+++ 04_NumbersStringsAndDates/StringExperiments/.idea/compiler.xml	(date 1606113815500)
@@ -1,22 +1,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="CompilerConfiguration">
-    <resourceExtensions />
-    <wildcardResourcePatterns>
-      <entry name="!?*.java" />
-      <entry name="!?*.form" />
-      <entry name="!?*.class" />
-      <entry name="!?*.groovy" />
-      <entry name="!?*.scala" />
-      <entry name="!?*.flex" />
-      <entry name="!?*.kt" />
-      <entry name="!?*.clj" />
-      <entry name="!?*.aj" />
-    </wildcardResourcePatterns>
-    <annotationProcessing>
-      <profile default="true" name="Default" enabled="false">
-        <processorPath useClasspath="true" />
-      </profile>
-    </annotationProcessing>
-  </component>
-</project>
\ No newline at end of file
Index: 04_NumbersStringsAndDates/StringExperiments/.idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"VcsDirectoryMappings\">\r\n    <mapping directory=\"\" vcs=\"\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_NumbersStringsAndDates/StringExperiments/.idea/vcs.xml	(revision 46942a9f1155c63b8356e9393047c2be2aea01dc)
+++ 04_NumbersStringsAndDates/StringExperiments/.idea/vcs.xml	(date 1606113815505)
@@ -1,6 +1,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="VcsDirectoryMappings">
-    <mapping directory="" vcs="" />
-  </component>
-</project>
\ No newline at end of file
Index: 04_NumbersStringsAndDates/StringExperiments/.idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectModuleManager\">\r\n    <modules>\r\n      <module fileurl=\"file://$PROJECT_DIR$/StringExperiments.iml\" filepath=\"$PROJECT_DIR$/StringExperiments.iml\" />\r\n    </modules>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_NumbersStringsAndDates/StringExperiments/.idea/modules.xml	(revision 46942a9f1155c63b8356e9393047c2be2aea01dc)
+++ 04_NumbersStringsAndDates/StringExperiments/.idea/modules.xml	(date 1606113815511)
@@ -1,8 +1,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectModuleManager">
-    <modules>
-      <module fileurl="file://$PROJECT_DIR$/StringExperiments.iml" filepath="$PROJECT_DIR$/StringExperiments.iml" />
-    </modules>
-  </component>
-</project>
\ No newline at end of file
Index: Airport/src/AirportTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Airport/src/AirportTest.java	(date 1606113815526)
+++ Airport/src/AirportTest.java	(date 1606113815526)
@@ -0,0 +1,8 @@
+import com.skillbox.airport.Airport;
+
+public class AirportTest {
+    public static void main(String[] args) {
+        Airport airport = Airport.getInstance();
+        System.out.println(airport.getAllAircrafts().size());
+    }
+}
Index: 04_NumbersStringsAndDates/StringExperiments/.idea/encodings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"Encoding\">\r\n    <file url=\"file://$PROJECT_DIR$/src/Loader.java\" charset=\"UTF-8\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_NumbersStringsAndDates/StringExperiments/.idea/encodings.xml	(revision 46942a9f1155c63b8356e9393047c2be2aea01dc)
+++ 04_NumbersStringsAndDates/StringExperiments/.idea/encodings.xml	(date 1606113815515)
@@ -1,6 +1,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="Encoding">
-    <file url="file://$PROJECT_DIR$/src/Loader.java" charset="UTF-8" />
-  </component>
-</project>
\ No newline at end of file
Index: 03_ObjectsAndClasses/Cat/src/CatColour.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 03_ObjectsAndClasses/Cat/src/CatColour.java	(date 1606113815491)
+++ 03_ObjectsAndClasses/Cat/src/CatColour.java	(date 1606113815491)
@@ -0,0 +1,6 @@
+public enum CatColour {
+    BLACK,
+    WHITE,
+    ORANGE,
+    RED;
+}
\ No newline at end of file
Index: 04_NumbersStringsAndDates/StringExperiments/.idea/copyright/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><component name=\"CopyrightManager\">\r\n  <settings default=\"\" />\r\n</component>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_NumbersStringsAndDates/StringExperiments/.idea/copyright/profiles_settings.xml	(revision 46942a9f1155c63b8356e9393047c2be2aea01dc)
+++ 04_NumbersStringsAndDates/StringExperiments/.idea/copyright/profiles_settings.xml	(date 1606113815521)
@@ -1,3 +1,0 @@
-<component name="CopyrightManager">
-  <settings default="" />
-</component>
\ No newline at end of file
Index: 04_NumbersStringsAndDates/IntegerExperiments/.idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectModuleManager\">\r\n    <modules>\r\n      <module fileurl=\"file://$PROJECT_DIR$/IntegerExperiments.iml\" filepath=\"$PROJECT_DIR$/IntegerExperiments.iml\" />\r\n    </modules>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_NumbersStringsAndDates/IntegerExperiments/.idea/modules.xml	(revision 46942a9f1155c63b8356e9393047c2be2aea01dc)
+++ 04_NumbersStringsAndDates/IntegerExperiments/.idea/modules.xml	(date 1606113815530)
@@ -1,8 +1,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectModuleManager">
-    <modules>
-      <module fileurl="file://$PROJECT_DIR$/IntegerExperiments.iml" filepath="$PROJECT_DIR$/IntegerExperiments.iml" />
-    </modules>
-  </component>
-</project>
\ No newline at end of file
Index: 04_NumbersStringsAndDates/IntegerExperiments/.idea/encodings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"Encoding\" addBOMForNewFiles=\"with NO BOM\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_NumbersStringsAndDates/IntegerExperiments/.idea/encodings.xml	(revision 46942a9f1155c63b8356e9393047c2be2aea01dc)
+++ 04_NumbersStringsAndDates/IntegerExperiments/.idea/encodings.xml	(date 1606113824513)
@@ -1,4 +1,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="Encoding" addBOMForNewFiles="with NO BOM" />
-</project>
\ No newline at end of file
